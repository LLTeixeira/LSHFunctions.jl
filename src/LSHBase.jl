#================================================================

Common typedefs and functions used throughout the LSH module.

================================================================#

#========================
Global variables and constants
========================#

# available_similarities: a set of all of the similarity functions that have
# been associated with hash functions via the register_similarity! macro.
const available_similarities = Set()

# Defaults to use for common arguments
const DEFAULT_N_HASHES = 1
const DEFAULT_DTYPE = Float32
const DEFAULT_RESIZE_POW2 = false

#========================
Abstract typedefs
========================#

abstract type LSHFunction end

@doc """
    abstract type SymmetricLSHFunction <: LSHFunction end

A symmetric locality-sensitive hashing function. A `SymmetricLSHFunction` uses the same hash function to insert items into a hash table as well as query the table for collisions. If `hashfn` is a `SymmetricLSHFunction`, you can compute the hash for an input `x` as `hashfn(x)`.

See also: [`AsymmetricLSHFunction`](@ref)
"""
abstract type SymmetricLSHFunction <: LSHFunction end

@doc """
    abstract type AsymmetricLSHFunction <: LSHFunction end

An asymmetric locality-sensitive hashing function. An `AsymmetricLSHFunction` uses one hash function to insert items into a hash table, and a different hash function to query the table for collisions. If `hashfn` is an `AsymmetricLSHFunction`, you can compute the indexing hash for an input `x` with `index_hash(hashfn,x)`, and the querying hash with `query_hash(hashfn,x)`.

See also: [`SymmetricLSHFunction`](@ref)
"""
abstract type AsymmetricLSHFunction <: LSHFunction end

#========================
Similarity function API
========================#

# Value type to encode different similarity functions
struct SimilarityFunction{F} end
SimilarityFunction(sim) = SimilarityFunction{sim}()

#========================
LSHFunction API
========================#

macro register_similarity! end
function LSHFunction end
function lsh_family end

#=
The following functions must be defined for all LSHFunction subtypes
=#

@doc """
    similarity(hashfn::LSHFunction)

Returns the similarity function that `hashfn` hashes on.

# Arguments
- `hashfn::AbstractLSHFunction`: the hash function whose similarity we would like to retrieve.

# Examples
```jldoctest; setup = :(using LSH)
julia> hashfn = LSHFunction(cossim);

julia> similarity(hashfn) == cossim
true

julia> hashfn = LSHFunction(ℓ1);

julia> similarity(hashfn) == ℓ1
true
```
"""
function similarity end

@doc """
    hashtype(hashfn::LSHFunction)

Returns the type of hash generated by a hash function.

# Examples
```jldoctest; setup = :(using LSH)
julia> hashfn = LSHFunction(cossim);

julia> hashtype(hashfn)
Bool

julia> hashfn = LSHFunction(ℓ1);

julia> hashtype(hashfn)
Int32
```
"""
function hashtype end

@doc """
    n_hashes(hashfn::LSHFunction)

Return the number of hashes computed by `hashfn`.

# Examples
```jldoctest; setup = :(using LSH)
julia> hashfn = SimHash();

julia> n_hashes(hashfn)
$(DEFAULT_N_HASHES)

julia> hashfn = SimHash(12);

julia> n_hashes(hashfn)
12

julia> hashes = hashfn(rand(25));

julia> length(hashes)
12
```
"""
function n_hashes end

#========================
SymmetricLSHFunction API
========================#

@doc """
    index_hash(hashfn::SymmetricLSHFunction, x)

Identical to calling `hashfn(x)`.

See also: [`query_hash`](@ref), [`SymmetricLSHFunction`](@ref)
"""
index_hash(hashfn::SymmetricLSHFunction, x) = hashfn(x)

@doc """
    query_hash(hashfn::SymmetricLSHFunction, x)

Identical to calling `hashfn(x)`.

See also: [`index_hash`](@ref), [`SymmetricLSHFunction`](@ref)
"""
query_hash(hashfn::SymmetricLSHFunction, x) = hashfn(x)

#=
The following functions must be defined for all SymmetricLSHFunction subtypes
=#
function (::SymmetricLSHFunction) end

#========================
Abstract typedefs
========================#

#=
The following functions must be defined for all AsymmetricLSHFunction subtypes
=#

@doc """
    index_hash(hashfn::AsymmetricLSHFunction, x)

Computes the indexing hash (the hash used to insert items into the hash table) for an `AsymmetricLSHFunction` with input `x`.

See also: [`query_hash`](@ref), [`AsymmetricLSHFunction`](@ref)
"""
function index_hash end

@doc """
    query_hash(hashfn::AsymmetricLSHFunction, x)

Computes the querying hash (the hash used to query for items in the hash table) for an `AsymmetricLSHFunction` with input `x`.

See also: [`index_hash`](@ref), [`AsymmetricLSHFunction`](@ref)
"""
function query_hash end

#========================
Documentation utilities
========================#

available_similarities_as_strings() = available_similarities .|> string |> sort

### Docstring generators for common keyword arguments
N_HASHES_DOCSTR(; default = DEFAULT_N_HASHES) = """
`n_hashes::Integer` (default: `$(default)`): the number of hash functions to generate."""

DTYPE_DOCSTR(hashfn; default = DEFAULT_DTYPE) = """
`dtype::DataType` (default: `$(default)`): the data type to use in the $(hashfn) internals. For performance reasons you should pick `dtype` to match the type of the data you're hashing."""

RESIZE_POW2_DOCSTR(hashfn; default = DEFAULT_RESIZE_POW2) = """
`resize_pow2::Bool` (default: `$(default)`): affects the way in which the returned `$(hashfn)` resizes to hash inputs of different sizes. If you think you'll be hashing inputs of many different sizes, it's more efficient to set `resize_pow2 = true`."""

