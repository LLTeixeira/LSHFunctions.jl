#================================================================

Utilities for compressing hashes into fixed-size hashes.

================================================================#

using SHA

#========================
HashCompressor definition and constructors
========================#

@doc """
    struct HashCompressor

A compressor for converting variable-width hashes generated by LSHFunctions
into fixed-width hashes. HashCompressor works by taking an array of hashes
generated by an LSHFunction, and using SHA-256 to convert it into a fixed-width
hash.
"""
struct HashCompressor
    n_bytes :: Int64
    salt :: Vector{UInt8}
end

@doc """
    function HashCompressor(
        n_bytes :: Integer = 32,
        salt :: Union{Vector{UInt8}} = Vector{UInt8}(undef,0)
    )

Construct a new HashCompressor that compresses a hash returned by an LSHFunction
into `n_bytes` bytes.

# Keyword arguments
- `n_bytes::Integer` (default: `32`): the number of bytes to compress hashes into.
- `salt::Vector{UInt8}` (default: `Vector{UInt8}(undef,0)`: a salt to prepend to hashes before compression using SHA-256.

# Examples
```jldoctest; setup = :(using LSHFunctions)
julia> compressor = HashCompressor(n_bytes=4);

julia> compressor([1, 4, 2, 9])
4-element Array{UInt8,1}:
 0xb8
 0xdd
 0x5a
 0x5e
```
"""
function HashCompressor(
    ;
    n_bytes :: Integer = 32,
    salt :: Union{Nothing,Vector{UInt8}} = Vector{UInt8}(undef,0)
)
    if !(0 <= n_bytes <= 32)
        "n_bytes must satisfy 0 <= n_bytes <= 32" |>
        ErrorException |>
        throw
    end

    HashCompressor(Int64(n_bytes), salt)
end

#========================
Compression functions
========================#
(compressor::HashCompressor)(hashes::BitArray{1}) =
    reinterpret(UInt8, hashes.chunks) |> compressor

(compressor::HashCompressor)(hashes::AbstractVector{I}) where {I <: Integer} =
    reinterpret(UInt8, hashes) |> compressor

function (compressor::HashCompressor)(hashes::AbstractVector{UInt8})
    hashes = begin
        if length(compressor.salt) == 0
            sha2_256(hashes)
        else
            sha2_256([compressor.salt; hashes])
        end
    end

    if compressor.n_bytes < 32
        hashes[1:compressor.n_bytes]
    else
        hashes
    end
end

